function backscatter = backscatter(ASCIIname,backscatterASC, nens)

[~,beam.nbins,~,~,~,~,Lat,Long]=import_ebhprll(ASCIIname, 1, nens);
nCols=max(beam.nbins)*2+1;
formatSpec =repmat('%f', [1 nCols]);

formatSpec =[formatSpec '%[^\n\r]'];
A=importbackscatter(backscatterASC, 1, nens,formatSpec);
t_ens=length(A);
reshaped.backscatter = cell(t_ens, 1) ;
for n=1:t_ens % Desired Ensemble Number, starting from 1
    p=A(n,:); % Extract the ensemble from the matrix
    input.p1=find(~isnan(p)); % Finding the NaN values (Spaces are converted to NaN during export)
    input.e1=reshape(p(input.p1),[],2); % Converting the ensemble to 4 beam columns
    input.e1(input.e1==-32768)=NaN; %Replace all bad data with NaN 
    reshaped.backscatter{n}=input.e1; %reshape.beam_vel contains all the beam velocities for all the ensembles of this particular transect
end
[Lat,Long,~] = deg2utm(Lat,Long);

DLat=num2cell(Lat); % Cell conversion of Lat
DLong=num2cell(Long); % Cell conversion of Long
for x=1:t_ens %for loop to repeat the lat long according to number of bins
    DLat{x,1}=repmat(DLat{x,1},beam.nbins(x,1),1);
    DLong{x,1}=repmat(DLong{x,1},beam.nbins(x,1),1);
end

Lat=cell2mat(DLat);
Long=cell2mat(DLong);
backscatter=cell2mat(reshaped.backscatter);
backscatter=horzcat(Lat,Long,backscatter);
end

%%
function backscatterASC = importbackscatter(filename, startRow, endRow,formatSpec)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   ALTLAT2J0001190610083140BACKSCATTERASC = IMPORTFILE(FILENAME) Reads
%   data from text file FILENAME for the default selection.
%
%   ALTLAT2J0001190610083140BACKSCATTERASC = IMPORTFILE(FILENAME, STARTROW,
%   ENDROW) Reads data from rows STARTROW through ENDROW of text file
%   FILENAME.
%
% Example:
%   ALTLAT2J0001190610083140backscatterASC = importfile('ALT_LAT_2_J_0_001_19-06-10_083140_backscatter_ASC.TXT', 1, 423);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2019/08/22 13:13:11

%% Initialize variables.
delimiter = {',',' '};
if nargin<=2
    startRow = 1;
    endRow = inf;
end

%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: double (%f)
%   column9: double (%f)
%	column10: double (%f)
%   column11: double (%f)
%	column12: double (%f)
%   column13: double (%f)
%	column14: double (%f)
%   column15: double (%f)
%	column16: double (%f)
%   column17: double (%f)
%	column18: double (%f)
%   column19: double (%f)
%	column20: double (%f)
%   column21: double (%f)
%	column22: double (%f)
%   column23: double (%f)
%	column24: double (%f)
%   column25: double (%f)
%	column26: double (%f)
%   column27: double (%f)
%	column28: double (%f)
%   column29: double (%f)
%	column30: double (%f)
%   column31: double (%f)
%	column32: double (%f)
%   column33: double (%f)
%	column34: double (%f)
%   column35: double (%f)
%	column36: double (%f)
%   column37: double (%f)
%	column38: double (%f)
%   column39: double (%f)
%	column40: double (%f)
%   column41: double (%f)
%	column42: double (%f)
%   column43: double (%f)
%	column44: double (%f)
%   column45: double (%f)
%	column46: double (%f)
%   column47: double (%f)
%	column48: double (%f)
%   column49: double (%f)
% For more information, see the TEXTSCAN documentation.
%formatSpec = '%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string', 'EmptyValue', NaN,  'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end
%% Close the text file.
fclose(fileID);


%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
backscatterASC = [dataArray{1:end-1}];
end