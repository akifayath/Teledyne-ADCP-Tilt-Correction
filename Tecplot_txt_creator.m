
function tecplot_data=Tecplot_txt_creator(backscatterASC,nens,Corr_earth_vel_cm)

%This function gives a mat file for exporting as ASCII and later .dat for Tecplot
%filename1= name of the beam2details template ASCII
%filename2= name of the only depth column .csv
%copy the depth column from excel and save it as csv
% Reads the number of bins and Lat Long per ensemble
% nens=length(Ensemble);
% endrow=sum(nbins)+6*(nens-1)+7;
% depth = import_depth(filename2, 1, endrow); %Reads the depth from the one column depth csv file
backscatter = backscatter(backscatterASC, nens);

% [Lat,Long,~] = deg2utm(Lat,Long); %Gives the UTM Coordinates
% 
% ini1=NaN(7,1); %NaNs for initial 7 row
% mid1=NaN(6,1); %NaNs for intermediate 6 rows
% DLat=num2cell(Lat); % Cell conversion of Lat
% DLong=num2cell(Long); % Cell conversion of Long
% for x=1:length(Ensemble) %for loop to repeat the lat long according to number of bins
%     DLat{x}=repmat(DLat{x,1},nbins(x,1),1);
%     DLong{x}=repmat(DLong{x,1},nbins(x,1),1);
% end
% for ii=1:length(DLat)-1 %For loop to insert the NaNs, making them equal size to the csv 
%     DLat{ii}=vertcat(DLat{ii,1},mid1);
%     DLong{ii}=vertcat(DLong{ii,1},mid1);
% end
% DLat=cell2mat(DLat);
% DLong=cell2mat(DLong);
% DLat=vertcat(ini1,DLat);
% DLong=vertcat(ini1,DLong);
% for t=1:length(DLat) %For loop to insert the values except for depth as NaNs 
%     if isnan(DLat(t,1)) 
%         depth(t,1)=NaN;    
%     end
% end

tecplot_data=horzcat(backscatter,Corr_earth_vel_cm);
tecplot_data(tecplot_data==-32768)=NaN;
% for p=1:length(tecplot_data)
%     if tecplot_data(p,5)==-32768
%         tecplot_data(p,:)=[];
%     end    
% end    
% save('trial_dat_file','tecplot_data','-ascii')
n=length(tecplot_data);
for r=n:-1:1   
      if isnan(tecplot_data(r,5))
        tecplot_data(r,:)=[];
      end
end
end


%%Functions


function [Ensemble,nbins,binsize,Heading,Pitch,Roll,Lat,Long] = import_ebhprll(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [ENSEMBLE,NBINS,BINSIZE,HEADING,PITCH,ROLL,LAT,LONG] =
%   IMPORTFILE(FILENAME) Reads data from text file FILENAME for the default
%   selection.
%
%   [ENSEMBLE,NBINS,BINSIZE,HEADING,PITCH,ROLL,LAT,LONG] =
%   IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [Ensemble,nbins,binsize,Heading,Pitch,Roll,Lat,Long] = import_ebhprll('A2_J_0_000_19-06-09_132346_trial_beam2details_template_new_ASC.TXT',1, 606);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2019/07/03 11:36:19

%% Initialize variables.
delimiter = {',',' '};
if nargin<=2
    startRow = 1;
    endRow = inf;
end

%% Format for each line of text:
%   column1: double (%f)
%	column3: double (%f)
%   column5: double (%f)
%	column7: double (%f)
%   column9: double (%f)
%	column11: double (%f)
%   column13: double (%f)
%	column15: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%*s%f%*s%f%*s%f%*s%f%*s%f%*s%f%*s%f%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
Ensemble = dataArray{:, 1};
nbins = dataArray{:, 2};
binsize = dataArray{:, 3};
Heading = dataArray{:, 4};
Pitch = dataArray{:, 5};
Roll = dataArray{:, 6};
Lat = dataArray{:, 7};
Long = dataArray{:, 8};


end

function VarName1 = import_depth(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   VARNAME1 = IMPORTFILE(FILENAME) Reads data from text file FILENAME for
%   the default selection.
%
%   VARNAME1 = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows
%   STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   VarName1 = import_depth('A2_J_0_000_19-06-09_132346_ASC.csv',1, 14640);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2019/07/10 21:09:04

%% Initialize variables.
delimiter = {''};
if nargin<=2
    startRow = 1;
    endRow = inf;
end

%% Format for each line of text:
%   column1: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r','n','UTF-8');
% Skip the BOM (Byte Order Mark).
fseek(fileID, 3, 'bof');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'EmptyValue', NaN, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'EmptyValue', NaN, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    dataArray{1} = [dataArray{1};dataArrayBlock{1}];
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
VarName1 = dataArray{:, 1};

end


